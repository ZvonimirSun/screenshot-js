import domToImage from 'dom-to-image'
import { saveAs } from 'file-saver'
import ScreenShotTool from './screenshot-tool'
import { fabric } from 'fabric'
import './screenshot.scss'

export default class ScreenShot {
  static getImage ({ node, width, height, callback = () => {} }) {
    return new Promise((resolve, reject) => {
      if (!(node instanceof window.HTMLElement)) {
        reject(new Error('node must be HTMLElement'))
      }
      let scale
      if (width && height) {
        scale = Math.min(node.offsetWidth / width, node.offsetHeight / height)
      } else {
        scale = 1
      }
      const style = {
        transform: 'scale(' + scale + ')',
        transformOrigin: 'top left',
        width: node.offsetWidth + 'px',
        height: node.offsetHeight + 'px'
      }
      const param = {
        height: node.offsetHeight * scale,
        width: node.offsetWidth * scale,
        quality: 1,
        style
      }
      domToImage
        .toBlob(node, param)
        .then((val) => {
          callback(val)
          resolve(val)
        })
        .catch((err) => {
          reject(err)
        })
    })
  }

  static getMergeImage ({ imgList = [], width, height, callback = () => {} }) {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas')
      canvas.width = width
      canvas.height = height
      const context = canvas.getContext('2d')

      let flag = 0
      imgList.forEach((item) => {
        if (item.img instanceof window.HTMLImageElement) {
          context.drawImage(item.img, 0, 0, item.width, item.height)
          flag++
        } else if (typeof item.img === 'string') {
          const img = new window.Image()
          img.src = item.img
          img.onload = () => {
            context.drawImage(
              img,
              item.x || 0,
              item.y || 0,
              item.width,
              item.height
            )
            flag++
            if (flag === imgList.length) {
              const data = canvas.toDataURL()
              callback(data)
              resolve(data)
            }
          }
          img.onerror = () => {
            flag++
            if (flag === imgList.length) {
              const data = canvas.toDataURL()
              callback(data)
              resolve(data)
            }
          }
        }
      })
      if (flag === imgList.length) {
        const data = canvas.toDataURL()
        callback(data)
        resolve(data)
      }
    })
  }

  constructor ({ node, img, destroyCallback = () => {} } = {}) {
    if (!(node instanceof window.HTMLElement)) {
      throw new Error('node must be HTMLElement')
    }
    if (node.__SCREEN_SHOT_GENERATED__) {
      throw new Error('node has been generated by ScreenShot')
    }

    node.__SCREEN_SHOT_GENERATED__ = true

    this._child = {}
    this._events = {}
    this._infos = {}
    this._tools = {}
    this._ready = false
    this._destroyed = false

    try {
      log('Screenshot 初始化开始')
      this._initNode({
        node,
        img
      })
      this._events.destroyCallback = destroyCallback
      this._events.keyboardEvent = this._keyboardEvent.bind(this)
      document.addEventListener('keydown', this._events.keyboardEvent)
      this._ready = true
      log('Screenshot 初始化完成')
    } catch (e) {
      this.destroy()
      log('Screenshot 初始化失败')
      throw e
    }
  }

  // region computed
  get ready () {
    return this._ready
  }

  get destroyed () {
    return this._destroyed
  }

  get node () {
    return this._node
  }

  get originImg () {
    return this._child?.originImg
  }

  get canvas () {
    return this._events?.drawEvent || this._drawer
  }

  get img () {
    if (this.canvas) {
      const img = new window.Image()
      img.src = this.canvas.toDataURL()
      return img
    } else {
      return null
    }
  }

  get _snipInfo () {
    return this._infos?.snipInfo || {}
  }

  set _snipInfo (val) {
    this._infos.snipInfo = val
    const snipper = this._snipper
    const snipperBorderWidth = parseFloat(snipper.style.borderWidth)
    snipper.style.width = val.width + 'px'
    snipper.style.height = val.height + 'px'
    snipper.style.transform = `matrix(1,0,0,1,${
      val.left - snipperBorderWidth
    },${val.top - snipperBorderWidth})`

    const sizeinfo = this._sizeinfo
    sizeinfo.style.display = 'block'
    if (val.top < 27) {
      sizeinfo.style.top = '5px'
    } else {
      sizeinfo.style.top = '-27px'
    }
    sizeinfo.innerText = `${val.width} * ${val.height}`
  }

  get _node () {
    return this._child?.node
  }

  set _node (val) {
    if (val) {
      this._child.node = val
    } else {
      delete this._child.node
    }
  }

  get _container () {
    return this._child?.container
  }

  set _container (val) {
    if (this._child?.container) {
      this._child.container.remove()
      delete this._child.container
    }
    if (val) {
      this._child.container = val
    }
  }

  get _originImg () {
    return this._child?.originImg
  }

  set _originImg (val) {
    if (this._child?.originImg) {
      this._child.originImg.remove()
      delete this._child.originImg
    }
    if (val) {
      this._child.originImg = val
    }
  }

  get _snipper () {
    return this._child?.snipper
  }

  set _snipper (val) {
    if (this._child?.snipper) {
      this._child.snipper.remove()
      delete this._child.snipper
    }
    if (val) {
      this._child.snipper = val
    }
  }

  get _resizer () {
    return this._child?.resizer
  }

  set _resizer (val) {
    if (this._child?.resizer) {
      this._child.resizer.remove()
      delete this._child.resizer
    }
    if (val) {
      this._child.resizer = val
    }
  }

  get _toolbar () {
    return this._child?.toolbar
  }

  set _toolbar (val) {
    if (this._child?.toolbar) {
      this._child.toolbar.remove()
      delete this._child.toolbar
    }
    if (val) {
      this._child.toolbar = val
    }
  }

  get _drawer () {
    return this._child?.drawer
  }

  set _drawer (val) {
    if (this._child?.drawer) {
      this._child.drawer.remove()
      delete this._child.drawer
    }
    if (val) {
      this._child.drawer = val
    }
  }

  get _sizeinfo () {
    return this._child?.sizeinfo
  }

  set _sizeinfo (val) {
    if (this._child?.sizeinfo) {
      this._child.sizeinfo.remove()
      delete this._child.sizeinfo
    }
    if (val) {
      this._child.sizeinfo = val
    }
  }

  get _hasActiveTool () {
    let result = false
    for (const name in this._tools) {
      if (this._tools[name].active) {
        result = true
      }
    }
    return result
  }
  // endregion

  destroy () {
    _clearDom(this._child.node)
    delete this._child.node.__SCREEN_SHOT_GENERATED__
    const destroyCallback = this._events?.destroyCallback
    document.removeEventListener('keydown', this._events.keyboardEvent)
    this._child = {}
    this._events = {}
    this._infos = {}
    this._tools = {}
    this._destroyed = true
    destroyCallback && destroyCallback()
  }

  /**
   * 删除事件
   * @param e {KeyboardEvent} 鼠标事件
   * @private
   */
  _keyboardEvent (e) {
    if (e.key === 'Escape') {
      this.destroy()
      return
    }
    if (this._hasActiveTool || e.repeat) {
      return
    }
    if (this._events.drawEvent && e.key === 'Delete') {
      const tmp = this.canvas.getActiveObject()
      const objects = tmp ? (tmp._objects ? tmp._objects : [tmp]) : []
      objects.forEach(object => {
        this.canvas.remove(object)
      })
      this.canvas.discardActiveObject()?.renderAll()
    }
  }

  // region 初始化
  _initNode ({ node, img }) {
    this._initContainer(node)
    this._initImage(img)
    this._initSnipper()
  }

  _initContainer (node) {
    this._node = node
    _clearDom(node)
    const container = this._container = document.createElement('div')
    container.classList.add('screenshot')
    node.append(container)
    log('Screenshot 容器创建完成')
  }

  _initImage (img) {
    const originImg = new window.Image()
    originImg.setAttribute('crossOrigin', 'Anonymous')
    if (img instanceof window.HTMLImageElement) {
      originImg.src = img.src
    } else if (typeof img === 'string') {
      originImg.src = img
    } else {
      throw new Error('Screenshot 图片容器创建失败')
    }
    this._originImg = originImg
    originImg.classList.add('screenshot-image')
    this._container.append(originImg)
    log('Screenshot 图片容器创建完成')
  }

  _initSnipper () {
    const container = this._container
    const containerStyle = window.getComputedStyle(container)

    const snipper = this._snipper = document.createElement('div')
    snipper.classList.add('screenshot-snipper')
    const snipperBorderWidth = Math.max(
      parseFloat(containerStyle.width),
      parseFloat(containerStyle.height)
    )
    snipper.style.borderWidth = snipperBorderWidth + 'px'
    snipper.style.transform = `matrix(1,0,0,1,${-snipperBorderWidth},${-snipperBorderWidth})`
    container.append(snipper)

    const sizeinfo = this._sizeinfo = document.createElement('div')
    sizeinfo.classList.add('screenshot-sizeinfo')
    snipper.append(sizeinfo)

    const resizer = this._resizer = document.createElement('div')
    resizer.classList.add('screenshot-resizer')
    snipper.append(resizer)
    _addDragEvent({
      node: container,
      downCallback: () => {
        snipper.style.borderColor = 'rgba(0,0,0,0.6)'
        snipper.style.cursor = 'crosshair'
      },
      moveCallback: ({ endPosition, startPosition }) => {
        const bounding = container.getBoundingClientRect()
        this._snipInfo = {
          width: Math.abs(endPosition.x - startPosition.x),
          height: Math.abs(endPosition.y - startPosition.y),
          left: Math.min(endPosition.x, startPosition.x) - bounding.x,
          top: Math.min(endPosition.y, startPosition.y) - bounding.y
        }
      },
      upCallback: () => {
        snipper.style.cursor = 'default'
        this._initResizer()
        this._initDrawer()
        this._initToolbar()
        let originLeft, originTop
        this._events.resizerEvent = _addDragEvent({
          node: resizer,
          upNode: container,
          moveNode: container,
          last: true,
          downCallback: () => {
            this._drawer = null
            this._destroyResizer()
            this._toolbar = null
            originLeft = this._snipInfo.left
            originTop = this._snipInfo.top
          },
          moveCallback: ({ endPosition, startPosition }) => {
            const left = originLeft + endPosition.x - startPosition.x
            const top = originTop + endPosition.y - startPosition.y
            const containerStyle = window.getComputedStyle(container)
            const containerWidth = parseFloat(containerStyle.width)
            const containerHeight = parseFloat(containerStyle.height)
            this._snipInfo = {
              ...this._snipInfo,
              left: left >= 0 ? (left + this._snipInfo.width <= containerWidth ? left : containerWidth - this._snipInfo.width) : 0,
              top: top >= 0 ? (top + this._snipInfo.height <= containerHeight ? top : containerHeight - this._snipInfo.height) : 0
            }
          },
          upCallback: () => {
            this._initResizer()
            this._initDrawer()
            this._initToolbar()
          }
        })
      }
    })
  }
  // endregion

  // region resizer
  _initResizer () {
    this._destroyResizer()
    const wrapper = document.createElement('div')
    wrapper.classList.add('screenshot-resizer-wrapper')
    const container = this._container
    const resizer = this._resizer
    this._events.resizerItemEvents = []
    for (const direction of ['top', 'topright', 'right', 'bottomright', 'bottom', 'bottomleft', 'left', 'topleft']) {
      const resizerItem = document.createElement('div')
      resizerItem.classList.add('screenshot-resizer-item', `screenshot-resizer-${direction}`)
      let _snipInfo
      this._events.resizerItemEvents.push(_addDragEvent({
        node: resizerItem,
        upNode: container,
        moveNode: container,
        last: true,
        downCallback: () => {
          this._toolbar = null
          this._drawer = null
          _snipInfo = { ...this._snipInfo }
          resizer.style.cursor = window.getComputedStyle(resizerItem).cursor
        },
        moveCallback: ({ endPosition, startPosition }) => {
          const x = endPosition.x - startPosition.x
          const y = endPosition.y - startPosition.y
          const tmpSnipInfo = { ..._snipInfo }
          if (direction.includes('top')) {
            tmpSnipInfo.top = _snipInfo.top + y < _snipInfo.top + _snipInfo.height - 10 ? _snipInfo.top + y : _snipInfo.top + _snipInfo.height - 10
            tmpSnipInfo.height = _snipInfo.height - y > 10 ? _snipInfo.height - y : 10
          }
          if (direction.includes('right')) {
            tmpSnipInfo.width = _snipInfo.width + x > 10 ? _snipInfo.width + x : 10
          }
          if (direction.includes('bottom')) {
            tmpSnipInfo.height = _snipInfo.height + y > 10 ? _snipInfo.height + y : 10
          }
          if (direction.includes('left')) {
            tmpSnipInfo.left = _snipInfo.left + x < _snipInfo.left + _snipInfo.width - 10 ? _snipInfo.left + x : _snipInfo.left + _snipInfo.width - 10
            tmpSnipInfo.width = _snipInfo.width - x > 10 ? _snipInfo.width - x : 10
          }
          this._snipInfo = tmpSnipInfo
        },
        upCallback: () => {
          this._initToolbar()
          this._initDrawer()
          resizer.style.cursor = 'move'
        }
      }))
      wrapper.append(resizerItem)
    }
    resizer.append(wrapper)
  }

  _destroyResizer () {
    if (this._events.resizerItemEvents) {
      for (const event of this._events.resizerItemEvents) {
        event.stop()
      }
    }
    delete this._events.resizerItemEvents
    _clearDom(this._resizer)
  }

  _stopResize () {
    this._destroyResizer()
    if (this._events.resizerEvent) {
      this._events.resizerEvent.stop()
      delete this._events.resizerEvent
    }
    this._resizer.remove()
  }
  // endregion

  // region drawer
  _initDrawer () {
    this._drawer = document.createElement('canvas')
    this._drawer.classList.add('screenshot-drawer')
    this._drawer.width = this._snipInfo.width
    this._drawer.height = this._snipInfo.height
    const context = this._drawer.getContext('2d')
    const widthScale = this._originImg.naturalWidth / this._originImg.width
    const heightScale = this._originImg.naturalHeight / this._originImg.height
    context.drawImage(this._originImg, this._snipInfo.left * widthScale, this._snipInfo.top * heightScale, this._snipInfo.width * widthScale, this._snipInfo.height * heightScale, 0, 0, this._snipInfo.width, this._snipInfo.height)
    this._snipper.append(this._drawer)
  }

  _initDrawEvent () {
    this._stopResize()
    const data = this.img
    if (!this._events.drawEvent) {
      this._events.drawEvent = new fabric.Canvas(this._drawer)
      this.canvas.setBackgroundImage(
        data.src,
        this.canvas.renderAll.bind(this.canvas)
      )
      this.canvas.selection = false
    }
  }

  // endregion

  // region toolbar
  _initToolbar () {
    this._toolbar = document.createElement('div')
    this._toolbar.classList.add('screenshot-toolbar')
    this._snipper.append(this._toolbar)
    // todo 绘制矩形
    // this._addTool({ name: '矩形', iconClass: 'icon-square' })
    // todo 绘制椭圆
    // this._addTool({ name: '椭圆', iconClass: 'icon-circle' })
    this._addToolWrite()
    this._addToolMosaic()
    this._addToolText()
    this._addToolDivider()
    // todo 撤销修改
    // this._addTool({ name: '撤销', iconClass: 'icon-return', disabled: true })
    this._addTool({
      name: '保存图片',
      iconClass: 'icon-download',
      clickEvent: () => {
        dataURLToBlob(this.canvas.toDataURL()).then((blob) => {
          saveAs(blob, 'clip.png')
          this.destroy()
        })
      }
    })
    this._addTool({
      name: '退出',
      iconClass: 'icon-close',
      color: 'red',
      clickEvent: () => {
        this.destroy()
      }
    })
    this._addTool({
      name: '完成',
      iconClass: 'icon-check',
      color: 'green',
      clickEvent: () => {
        dataURLToBlob(this.canvas.toDataURL()).then((blob) => {
          const data = [
            new window.ClipboardItem({
              [blob.type]: blob
            })
          ]
          navigator.clipboard.write(data).finally(() => {
            this.destroy()
          })
        })
      }
    })
    if (this._snipInfo.top + this._snipInfo.height + 50 < this._container.offsetHeight) {
      this._toolbar.style.top = 'calc(100% + 8px)'
    } else {
      this._toolbar.style.top = 'calc(100% - 50px)'
    }
    if (this._snipInfo.left + this._snipInfo.width - this._toolbar.offsetWidth >= 0) {
      this._toolbar.style.left = 'unset'
      this._toolbar.style.right = '0'
    } else {
      this._toolbar.style.left = '0'
      this._toolbar.style.right = 'unset'
    }
  }

  _addTool ({ name = '', iconClass = '', color = 'white', disabled = false, clickEvent, activeEvent, pauseEvent } = {}) {
    this._tools[name] = new ScreenShotTool({
      name,
      iconClass,
      color,
      disabled,
      clickEvent: clickEvent
        ? () => {
            if (!this._tools[name].disabled) {
              clickEvent()
            }
          }
        : () => {
            this._initDrawEvent()
            this._switchActiveTool(this._tools[name])
          },
      activeEvent,
      pauseEvent
    })
    this._toolbar.append(this._tools[name].dom)
    return this._tools[name]
  }

  _addToolDivider () {
    const dom = document.createElement('div')
    dom.classList.add('screenshot-toolbar-divider')
    this._toolbar.append(dom)
  }

  _addToolWrite () {
    this._addTool({
      name: '画笔',
      iconClass: 'icon-write',
      activeEvent: () => {
        // 设置画笔颜色
        this.canvas.freeDrawingBrush.color = 'red'
        // 设置画笔粗细
        this.canvas.freeDrawingBrush.width = 5
        this.canvas.isDrawingMode = true
      },
      pauseEvent: () => {
        this.canvas.isDrawingMode = false
      }
    })
  }

  _addToolMosaic () {
    this._addTool({
      name: '马赛克',
      iconClass: 'icon-mosaic'
    })
  }

  _addToolText () {
    this._addTool({
      name: '文本',
      iconClass: 'icon-text'
    })
  }

  _switchActiveTool (tool) {
    if (!tool.active) {
      for (const name in this._tools) {
        if (name !== tool.name) {
          this._tools[name].active = false
        }
      }
    }
    tool.active = !tool.active
  }
  // endregion
}

/**
 * 清空节点
 * @param {HTMLElement} node
 */
function _clearDom (node) {
  if (!(node instanceof window.HTMLElement)) {
    throw new Error('node must be HTMLElement')
  }
  while (node.firstChild) {
    node.removeChild(node.lastChild)
  }
}

function _addDragEvent ({ node, moveNode, upNode, moveCallback = () => {}, downCallback = () => {}, upCallback = () => {}, last = false } = {}) {
  if (!(node instanceof window.HTMLElement)) {
    throw new Error('node must be HTMLElement')
  }

  let startPosition
  upNode = upNode || node
  moveNode = moveNode || node

  node.addEventListener('click', _empty)
  node.addEventListener('mousedown', _handleMouseDown)
  upNode.addEventListener('mouseup', _handleMouseUp)
  let flag = true

  function _empty () {}

  function _handleMouseDown (e) {
    e.stopPropagation()
    e.preventDefault()
    if (flag) {
      flag = false
      startPosition = {
        x: e.clientX,
        y: e.clientY
      }
      moveNode.addEventListener('mousemove', _handleMouseMove)
      downCallback({ startPosition })
    }
  }

  function _handleMouseMove (e) {
    e.stopPropagation()
    e.preventDefault()
    moveCallback({
      startPosition,
      endPosition: {
        x: e.clientX,
        y: e.clientY
      }
    })
  }

  function _handleMouseUp (e) {
    e.stopPropagation()
    e.preventDefault()
    if (!startPosition) {
      return
    }
    moveNode.removeEventListener('mousemove', _handleMouseMove)
    if (!last) {
      node.removeEventListener('click', _empty)
      node.removeEventListener('mousedown', _handleMouseDown)
      upNode.removeEventListener('mouseup', _handleMouseUp)
    }
    upCallback({
      startPosition,
      endPosition: {
        x: e.clientX,
        y: e.clientY
      }
    })
    startPosition = null
    flag = true
  }

  function stop () {
    last = false
    moveNode.removeEventListener('mousemove', _handleMouseMove)
    node.removeEventListener('click', _empty)
    node.removeEventListener('mousedown', _handleMouseDown)
    upNode.removeEventListener('mouseup', _handleMouseUp)
    startPosition = null
  }

  return {
    stop
  }
}

function log (msg) {
  console.log('[' + new Date().toLocaleString('zh', { hour12: false }) + '] ', msg)
}

async function dataURLToBlob (dataURI) {
  return await (await window.fetch(dataURI)).blob()
}
